@page
@model WEB.Pages.UserManager.MyTransactions.IndexModel
@{
}
<h1 class="mb-4">Manager Transaction</h1>
<style>
    /* Style cho các tiêu đề có thể sắp xếp */
    th.sortable {
        cursor: pointer;
        user-select: none;
        position: relative;
    }

        th.sortable::after {
            content: '\25B2'; /* Unicode character for upward arrow */
            padding-left: 5px;
            opacity: 0.6;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            right: 0;
        }

    th.asc::after {
        content: '\25B2'; /* Unicode character for upward arrow */
        opacity: 1;
    }

    th.desc::after {
        content: '\25BC'; /* Unicode character for downward arrow */
        opacity: 1;
    }
</style>


<div class="mb-3">
    <input type="text" id="searchInput" placeholder="Search transactions..." class="form-control">
</div>

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <thead class="bg-success text-white">
            <tr>
                <th class="sortable" onclick="sortTable(0)">
                    Product
                </th>
                <th class="sortable" onclick="sortTable(1)">
                    Buyer
                </th>
                <th class="sortable" onclick="sortTable(3)">
                    Saler
                </th >
                <th class="sortable" onclick="sortTable(4)">
                    Status
                </th >
                <th>
                    Amount
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.MyList)
            {
                <tr>
                    <td>
                        @item.Product.Name
                    </td>
                    <td>
                        @item.Buyer.Username
                    </td>
                    <td>
                        @item.Seller.Username
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    @if (ViewBag.U.UserId == @item.Buyer.UserId)
                    {
                        <td class="text-danger">
                            - @item.Amount
                        </td>
                    }
                    else
                    {
                        <td class="text-success">
                            + @item.Amount
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
@* <div class="d-md-table-cell d-md-block">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    <a class="page-link" asp-page="./Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }
        </ul>
    </nav>
</div>
 *@
 <script>
    // Filter functionality
    document.getElementById("searchInput").addEventListener("keyup", function () {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.querySelector(".table");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[1]; // Change index to match the column you want to filter
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    });

    // Sorting functionality
    function sortTable(columnIndex) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.querySelector(".table");
        switching = true;
        dir = "asc"; // Set the default direction to ascending

        while (switching) {
            switching = false;
            rows = table.getElementsByTagName("tr");

            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("td")[columnIndex];
                y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                if (dir === "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir === "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }

            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount === 0 && dir === "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }

        // Add/remove classes to show sorting direction
        var headers = document.querySelectorAll(".sortable");
        headers.forEach(function (header) {
            header.classList.remove("asc", "desc");
        });
        var clickedHeader = document.querySelector(".sortable:nth-child(" + (columnIndex + 1) + ")");
        clickedHeader.classList.toggle("asc", dir === "asc");
        clickedHeader.classList.toggle("desc", dir === "desc");
    }
</script>